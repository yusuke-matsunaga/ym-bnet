#ifndef BLIFNODEIMPL_H
#define BLIFNODEIMPL_H

/// @file BnNodeImpl.h
/// @brief BnNodeImpl のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2005-2012, 2014, 2016 Yusuke Matsunaga
/// All rights reserved.


#include "ym/BnNode.h"
#include "ym/Expr.h"
#include "ym/TvFunc.h"


BEGIN_NAMESPACE_YM_BNET

//////////////////////////////////////////////////////////////////////
/// @class BnNodeImpl BnNodeImpl.h "BnNodeImpl.h"
/// @brief BnNode の実装クラスの基底クラス
//////////////////////////////////////////////////////////////////////
class BnNodeImpl :
  public BnNode
{
  friend class BnNetworkImpl;

public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  BnNodeImpl(ymuint id,
	     const char* name);

  /// @brief デストラクタ
  virtual
  ~BnNodeImpl();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ノードID を返す．
  virtual
  ymuint
  id() const;

  /// @brief 名前を返す．
  virtual
  const char*
  name() const;

  /// @brief ファンアウト数を得る．
  virtual
  ymuint
  fanout_num() const;

  /// @brief ファンアウトのノードIDを返す．
  /// @param[in] pos 位置番号 ( 0 <= pos < fanout_num() )
  virtual
  ymuint
  fanout_id(ymuint pos) const;


public:
  //////////////////////////////////////////////////////////////////////
  // 論理タイプ/ゲートタイプに共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ファンイン数を得る．
  virtual
  ymuint
  fanin_num() const;

  /// @brief ファンインのノードIDを返す．
  /// @param[in] pos 入力位置 ( 0 <= pos < fanin_num() )
  virtual
  ymuint
  fanin_id(ymuint pos) const;


public:
  //////////////////////////////////////////////////////////////////////
  // プリミティブゲートタイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ゲートの型を返す．
  virtual
  GateType
  gate_type() const;


public:
  //////////////////////////////////////////////////////////////////////
  // ゲートタイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief セルを返す．
  virtual
  const Cell*
  cell() const;


public:
  //////////////////////////////////////////////////////////////////////
  // 論理タイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief カバーを得る．
  virtual
  const BlifCover*
  cover() const;


public:
  //////////////////////////////////////////////////////////////////////
  // 論理式タイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 論理式を得る．
  virtual
  Expr
  expr() const;


public:
  //////////////////////////////////////////////////////////////////////
  // 真理値表タイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 真理値表を得る．
  virtual
  TvFunc
  truth_vector() const;


public:
  //////////////////////////////////////////////////////////////////////
  // ラッチタイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 入力ノードのID番号を返す．
  virtual
  ymuint
  inode_id() const;

  /// @brief リセット値を返す．
  virtual
  char
  reset_val() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  // ここのメモリ領域はすべて BnNetworkImpl::mAlloc が管理する．
  //////////////////////////////////////////////////////////////////////

  // ID 番号
  ymuint mId;

  // 名前
  const char* mName;

  // ファンアウト数
  ymuint mFanoutNum;

  // ファンアウト(のID番号)のリスト
  ymuint* mFanoutList;

};


//////////////////////////////////////////////////////////////////////
/// @class BnInputNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 入力ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnInputNode :
  public BnNodeImpl
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  BnInputNode(ymuint id,
		const char* name);

  /// @brief デストラクタ
  virtual
  ~BnInputNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を返す．
  virtual
  Type
  type() const;

  /// @brief 内容を blif 形式で出力する．
  /// @param[in] s 出力先のストリーム
  virtual
  void
  write_blif(ostream& s) const;

};


//////////////////////////////////////////////////////////////////////
/// @class BnLogicNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 論理ノードに共通の親クラス
//////////////////////////////////////////////////////////////////////
class BnLogicNode :
  public BnNodeImpl
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID番号
  /// @param[in] name ノード名
  /// @param[in] ni ファンイン数
  /// @param[in] fanins ファンインのID番号の配列
  BnLogicNode(ymuint id,
	      const char* name,
	      ymuint ni,
	      const ymuint* fanins);

  /// @brief デストラクタ
  virtual
  ~BnLogicNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 論理タイプ/ゲートタイプに共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ファンイン数を得る．
  virtual
  ymuint
  fanin_num() const;

  /// @brief ファンインのノードIDを返す．
  /// @param[in] pos 入力位置 ( 0 <= pos < fanin_num() )
  virtual
  ymuint
  fanin_id(ymuint pos) const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  // ここのメモリ領域はすべて BnNetworkImpl::mAlloc が管理する．
  //////////////////////////////////////////////////////////////////////

  // ファンイン数
  ymuint mFaninNum;

  // ファンインのIDの配列
  const ymuint* mFanins;

};


//////////////////////////////////////////////////////////////////////
/// @class BnPrimNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief プリミティブゲートノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnPrimNode :
  public BnLogicNode
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID番号
  /// @param[in] name ノード名
  /// @param[in] ni ファンイン数
  /// @param[in] fanins ファンインのID番号の配列
  /// @param[in] gate_type ゲートの型
  BnPrimNode(ymuint id,
	     const char* name,
	     ymuint ni,
	     const ymuint* fanins,
	     GateType gate_type);

  /// @brief デストラクタ
  virtual
  ~BnPrimNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を返す．
  virtual
  Type
  type() const;

  /// @brief 内容を blif 形式で出力する．
  /// @param[in] s 出力先のストリーム
  virtual
  void
  write_blif(ostream& s) const;


public:
  //////////////////////////////////////////////////////////////////////
  // プリミティブゲートタイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ゲートの型を返す．
  virtual
  GateType
  gate_type() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ゲートの型
  GateType mGateType;

};


//////////////////////////////////////////////////////////////////////
/// @class BnCellNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief セルノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnCellNode :
  public BnLogicNode
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID番号
  /// @param[in] name ノード名
  /// @param[in] ni ファンイン数
  /// @param[in] fanins ファンインのID番号の配列
  /// @param[in] cell セルへのポインタ
  BnCellNode(ymuint id,
	     const char* name,
	     ymuint ni,
	     const ymuint* fanins,
	     const Cell* cell);

  /// @brief デストラクタ
  virtual
  ~BnCellNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を返す．
  virtual
  Type
  type() const;

  /// @brief 内容を blif 形式で出力する．
  /// @param[in] s 出力先のストリーム
  virtual
  void
  write_blif(ostream& s) const;


public:
  //////////////////////////////////////////////////////////////////////
  // ゲートタイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief セルを返す．
  virtual
  const Cell*
  cell() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // セル
  const Cell* mCell;

};


//////////////////////////////////////////////////////////////////////
/// @class BnCoverNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief カバーノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnCoverNode :
  public BnLogicNode
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID番号
  /// @param[in] name ノード名
  /// @param[in] ni ファンイン数
  /// @param[in] fanins ファンインのID番号の配列
  /// @param[in] cover カバー
  BnCoverNode(ymuint id,
	      const char* name,
	      ymuint ni,
	      const ymuint* fanins,
	      const BlifCover* cover);

  /// @brief デストラクタ
  virtual
  ~BnCoverNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を返す．
  virtual
  Type
  type() const;

  /// @brief 内容を blif 形式で出力する．
  /// @param[in] s 出力先のストリーム
  virtual
  void
  write_blif(ostream& s) const;


public:
  //////////////////////////////////////////////////////////////////////
  // カバータイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief カバーを得る．
  virtual
  const BlifCover*
  cover() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // カバー
  const BlifCover* mCover;

};


//////////////////////////////////////////////////////////////////////
/// @class BnExprNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 論理式ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnExprNode :
  public BnLogicNode
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID番号
  /// @param[in] name ノード名
  /// @param[in] ni ファンイン数
  /// @param[in] fanins ファンインのID番号の配列
  /// @param[in] expr 論理式
  BnExprNode(ymuint id,
	     const char* name,
	     ymuint ni,
	     const ymuint* fanins,
	     Expr expr);

  /// @brief デストラクタ
  virtual
  ~BnExprNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を返す．
  virtual
  Type
  type() const;

  /// @brief 内容を blif 形式で出力する．
  /// @param[in] s 出力先のストリーム
  virtual
  void
  write_blif(ostream& s) const;


public:
  //////////////////////////////////////////////////////////////////////
  // 論理式タイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 論理式を得る．
  virtual
  Expr
  expr() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 論理式
  Expr mExpr;

};


//////////////////////////////////////////////////////////////////////
/// @class BnTvNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 真理値表ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnTvNode :
  public BnLogicNode
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID番号
  /// @param[in] name ノード名
  /// @param[in] ni ファンイン数
  /// @param[in] fanins ファンインのID番号の配列
  /// @param[in] tv 真理値表
  BnTvNode(ymuint id,
	   const char* name,
	   ymuint ni,
	   const ymuint* fanins,
	   TvFunc tv);

  /// @brief デストラクタ
  virtual
  ~BnTvNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を返す．
  virtual
  Type
  type() const;

  /// @brief 内容を blif 形式で出力する．
  /// @param[in] s 出力先のストリーム
  virtual
  void
  write_blif(ostream& s) const;


public:
  //////////////////////////////////////////////////////////////////////
  // 真理値表タイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 真理値表を得る．
  virtual
  TvFunc
  truth_vector() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 真理値表
  TvFunc mTv;

};


//////////////////////////////////////////////////////////////////////
/// @class BnLatchNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief ラッチノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnLatchNode :
  public BnNodeImpl
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] inode_id 入力ノードのID番号
  /// @param[in] rval リセット値
  BnLatchNode(ymuint id,
	      const char* name,
	      ymuint inode_id,
	      char rval);

  /// @brief デストラクタ
  virtual
  ~BnLatchNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 型を返す．
  virtual
  Type
  type() const;

  /// @brief 内容を blif 形式で出力する．
  /// @param[in] s 出力先のストリーム
  virtual
  void
  write_blif(ostream& s) const;


public:
  //////////////////////////////////////////////////////////////////////
  // ラッチタイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 入力ノードのID番号を返す．
  virtual
  ymuint
  inode_id() const;

  /// @brief リセット値を返す．
  virtual
  char
  reset_val() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 入力ノードのID
  ymuint mInodeId;

  // リセット値
  char mResetVal;

};

END_NAMESPACE_YM_BNET

#endif // BLIFNODEIMPL_H
