#ifndef BNOUTPUTNODE_H
#define BNOUTPUTNODE_H

/// @file BnOutputNode.h
/// @brief BnOutputNode のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2016 Yusuke Matsunaga
/// All rights reserved.


#include "BnNodeImpl.h"


BEGIN_NAMESPACE_YM_BNET

//////////////////////////////////////////////////////////////////////
/// @class BnOutputNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 外部出力ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnOutputNode :
  public BnNodeImpl
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  BnOutputNode(int id,
	       const string& name,
	       int output_id);

  /// @brief デストラクタ
  ~BnOutputNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief タイプを返す．
  BnNodeType
  type() const override;

  /// @brief 外部出力ノードの時 true を返す．
  bool
  is_output() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // 外部出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 出力番号を返す．
  ///
  /// is_output() == false の時の動作は不定<br>
  /// node_id = BnNetwork::output_id(pos) の時，node->output_pos() = pos となる．
  int
  output_pos() const override;

  /// @brief ファンイン数を得る．
  int
  fanin_num() const override;

  /// @brief ファンインのノード番号を返す．
  /// @param[in] pos 入力位置 ( 0 <= pos < fanin_num() )
  int
  fanin_id(int pos) const override;

  /// @brief ファンインのノード番号のリストを返す．
  const vector<int>&
  fanin_id_list() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // 設定用のインターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ファンインを設定する．
  /// @param[in] ipos 入力位置
  /// @param[in] fanin_id ファンインのノード番号
  void
  set_fanin(int ipos,
	    int fanin_id) override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 出力位置
  int mOutputPos;

  // ファンインのノード番号
  int mFanin;

};


//////////////////////////////////////////////////////////////////////
/// @class BnPortOutput BnPortOutput.h "BnPortOutput.h"
/// @brief 外部出力端子を表すクラス
//////////////////////////////////////////////////////////////////////
class BnPortOutput :
  public BnOutputNode
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] port_id ポート番号
  /// @param[in] port_bit ポート中のビット位置
  BnPortOutput(int id,
	       const string& name,
	       int output_id,
	       int port_id,
	       int port_bit);

  /// @brief デストラクタ
  ~BnPortOutput();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 外部出力端子の時に true を返す．
  bool
  is_port_output() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // 入力タイプ/出力タイプに共通なインターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 接続しているポート番号を返す．
  ///
  /// is_port_input() == true || is_port_output() == true の時のみ意味を持つ．
  int
  port_id() const override;

  /// @brief 接続しているポート中のビット番号を返す．
  ///
  /// is_port_input() || is_port_output() の時のみ意味を持つ．
  int
  port_bit() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ポート番号
  int mPortId;

  // ポート中のビット位置
  int mPortBit;

};


//////////////////////////////////////////////////////////////////////
/// @class BnDffControl BnOutputNode.h "BnOutputNode.h"
/// @brief DFf の入力系端子を表すクラス
///
/// 名前が紛らわしいが出力ノードである．
//////////////////////////////////////////////////////////////////////
class BnDffControl :
  public BnOutputNode
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] dff_id DFF番号
  BnDffControl(int id,
	       const string& name,
	       int output_id,
	       int dff_id);

  /// @brief デストラクタ
  ~BnDffControl();


public:
  //////////////////////////////////////////////////////////////////////
  // 入力タイプ/出力タイプに共通なインターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 接続しているDFFの番号を返す．
  ///
  /// is_dff_input() || is_dff_output() || is_dff_clock() || is_dff_clear() || is_dff_preset()
  /// の時のみ意味を持つ．
  int
  dff_id() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // DFF番号
  int mDffId;

};


//////////////////////////////////////////////////////////////////////
/// @class BnDffInput BnOutputNode.h "BnOutputNode.h"
/// @brief DFf の入力端子を表すクラス
///
/// 名前が紛らわしいが出力ノードである．
//////////////////////////////////////////////////////////////////////
class BnDffInput :
  public BnDffControl
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] dff_id DFF番号
  BnDffInput(int id,
	     const string& name,
	     int output_id,
	     int dff_id);

  /// @brief デストラクタ
  ~BnDffInput();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brie DFFの入力端子の時に true を返す．
  bool
  is_dff_input() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};


//////////////////////////////////////////////////////////////////////
/// @class BnDffClock BnOutputNode.h "BnOutputNode.h"
/// @brief DFf のクロック入力端子を表すクラス
//////////////////////////////////////////////////////////////////////
class BnDffClock :
  public BnDffControl
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] dff_id DFF番号
  BnDffClock(int id,
	     const string& name,
	     int output_id,
	     int dff_id);

  /// @brief デストラクタ
  ~BnDffClock();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief DFFのクロック端子の時に true を返す．
  bool
  is_dff_clock() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};


//////////////////////////////////////////////////////////////////////
/// @class BnDffClear BnOutputNode.h "BnOutputNode.h"
/// @brief DFf のクリア端子を表すクラス
//////////////////////////////////////////////////////////////////////
class BnDffClear :
  public BnDffControl
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] dff_id DFF番号
  BnDffClear(int id,
	     const string& name,
	     int output_id,
	     int dff_id);

  /// @brief デストラクタ
  ~BnDffClear();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief DFFのクリア端子の時に true を返す．
  bool
  is_dff_clear() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};


//////////////////////////////////////////////////////////////////////
/// @class BnDffPreset BnOutputNode.h "BnOutputNode.h"
/// @brief DFf のプリセット端子を表すクラス
//////////////////////////////////////////////////////////////////////
class BnDffPreset :
  public BnDffControl
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] dff_id DFF番号
  BnDffPreset(int id,
	      const string& name,
	      int output_id,
	      int dff_id);

  /// @brief デストラクタ
  ~BnDffPreset();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief DFFのプリセット端子の時に true を返す．
  bool
  is_dff_preset() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};


//////////////////////////////////////////////////////////////////////
/// @class BnLatchControl BnOutputNode.h "BnOutputNode.h"
/// @brief ラッチの入力系端子を表すクラス
///
/// 名前が紛らわしいが出力ノードである．
//////////////////////////////////////////////////////////////////////
class BnLatchControl :
  public BnOutputNode
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] latch_id ラッチ番号
  BnLatchControl(int id,
		 const string& name,
		 int output_id,
		 int latch_id);

  /// @brief デストラクタ
  ~BnLatchControl();


public:
  //////////////////////////////////////////////////////////////////////
  // 入力タイプ/出力タイプに共通なインターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 接続しているラッチの番号を返す．
  ///
  /// is_latch_input() || is_latch_output() || is_latch_enable() || is_latch_clear() || is_latch_preset()
  /// の時のみ意味を持つ．
  int
  latch_id() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ラッチ番号
  int mLatchId;

};


//////////////////////////////////////////////////////////////////////
/// @class BnLatchInput BnOutputNode.h "BnOutputNode.h"
/// @brief ラッチの入力端子を表すクラス
///
/// 名前が紛らわしいが出力ノードである．
//////////////////////////////////////////////////////////////////////
class BnLatchInput :
  public BnLatchControl
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] latch_id ラッチ番号
  BnLatchInput(int id,
	       const string& name,
	       int output_id,
	       int latch_id);

  /// @brief デストラクタ
  ~BnLatchInput();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brie ラッチの入力端子の時に true を返す．
  bool
  is_latch_input() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};


//////////////////////////////////////////////////////////////////////
/// @class BnLatchEnable BnOutputNode.h "BnOutputNode.h"
/// @brief ラッチのイネーブル端子を表すクラス
//////////////////////////////////////////////////////////////////////
class BnLatchEnable :
  public BnLatchControl
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] latch_id ラッチ番号
  BnLatchEnable(int id,
		const string& name,
		int output_id,
		int latch_id);

  /// @brief デストラクタ
  ~BnLatchEnable();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ラッチのイネーブル端子の時に true を返す．
  bool
  is_latch_enable() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};


//////////////////////////////////////////////////////////////////////
/// @class BnLatchClear BnOutputNode.h "BnOutputNode.h"
/// @brief ラッチのクリア端子を表すクラス
//////////////////////////////////////////////////////////////////////
class BnLatchClear :
  public BnLatchControl
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] latch_id ラッチ番号
  BnLatchClear(int id,
	       const string& name,
	       int output_id,
	       int latch_id);

  /// @brief デストラクタ
  ~BnLatchClear();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ラッチのクリア端子の時に true を返す．
  bool
  is_latch_clear() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};


//////////////////////////////////////////////////////////////////////
/// @class BnLatchPreset BnOutputNode.h "BnOutputNode.h"
/// @brief ラッチのプリセット端子を表すクラス
//////////////////////////////////////////////////////////////////////
class BnLatchPreset :
  public BnLatchControl
{
public:

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] output_id 出力番号
  /// @param[in] latch_id ラッチ番号
  BnLatchPreset(int id,
		const string& name,
		int output_id,
		int latch_id);

  /// @brief デストラクタ
  ~BnLatchPreset();


public:
  //////////////////////////////////////////////////////////////////////
  // 出力ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ラッチのプリセット端子の時に true を返す．
  bool
  is_latch_preset() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};

END_NAMESPACE_YM_BNET

#endif // BNOUTPUTNODE_H
