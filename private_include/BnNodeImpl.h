#ifndef BLIFNODEIMPL_H
#define BLIFNODEIMPL_H

/// @file BnNodeImpl.h
/// @brief BnNodeImpl のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2005-2012, 2014, 2016 Yusuke Matsunaga
/// All rights reserved.


#include "ym/BnNode.h"
#include "ym/Expr.h"
#include "ym/TvFunc.h"


BEGIN_NAMESPACE_YM_BNET

//////////////////////////////////////////////////////////////////////
/// @class BnNodeImpl BnNodeImpl.h "BnNodeImpl.h"
/// @brief BnNode の実装クラスの基底クラス
//////////////////////////////////////////////////////////////////////
class BnNodeImpl :
  public BnNode
{
  friend class BnNetworkImpl;

public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  BnNodeImpl(ymuint id,
	     const char* name);

  /// @brief デストラクタ
  virtual
  ~BnNodeImpl();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ノードID を返す．
  virtual
  ymuint
  id() const;

  /// @brief 名前を返す．
  virtual
  const char*
  name() const;

  /// @brief 外部入力の時 true を返す．
  virtual
  bool
  is_input() const;

  /// @brief 外部出力の時 true を返す．
  virtual
  bool
  is_output() const;

  /// @brief D-FF ノードの時 true を返す．
  virtual
  bool
  is_dff() const;

  /// @brief 論理ノードの時 true を返す．
  virtual
  bool
  is_logic() const;

  /// @brief ファンアウト数を得る．
  virtual
  ymuint
  fanout_num() const;

  /// @brief ファンアウトのノードIDを返す．
  /// @param[in] pos 位置番号 ( 0 <= pos < fanout_num() )
  virtual
  ymuint
  fanout_id(ymuint pos) const;


public:
  //////////////////////////////////////////////////////////////////////
  // 外部出力ノード/D-FFノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 入力ノードのID番号を返す．
  virtual
  ymuint
  inode_id() const;


public:
  //////////////////////////////////////////////////////////////////////
  // 論理ノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ファンイン数を得る．
  virtual
  ymuint
  fanin_num() const;

  /// @brief ファンインのノードIDを返す．
  /// @param[in] pos 入力位置 ( 0 <= pos < fanin_num() )
  virtual
  ymuint
  fanin_id(ymuint pos) const;

  /// @brief 関数のタイプを返す．
  const BnFuncType*
  func_type() const;


public:
  //////////////////////////////////////////////////////////////////////
  // D-FFノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief リセット値を返す．
  virtual
  char
  reset_val() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  // ここのメモリ領域はすべて BnNetworkImpl::mAlloc が管理する．
  //////////////////////////////////////////////////////////////////////

  // ID 番号
  ymuint mId;

  // 名前
  const char* mName;

  // ファンアウト数
  ymuint mFanoutNum;

  // ファンアウト(のID番号)のリスト
  ymuint* mFanoutList;

};


//////////////////////////////////////////////////////////////////////
/// @class BnInputNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 入力ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnInputNode :
  public BnNodeImpl
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  BnInputNode(ymuint id,
	      const char* name);

  /// @brief デストラクタ
  virtual
  ~BnInputNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 外部入力の時 true を返す．
  virtual
  bool
  is_input() const;

};


//////////////////////////////////////////////////////////////////////
/// @class BnODNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 出力ノードとD-FFノードの共通な親クラス
//////////////////////////////////////////////////////////////////////
class BnODNode :
  public BnNodeImpl
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] inode_id 入力ノードのID番号
  BnODNode(ymuint id,
	   const char* name,
	   ymuint inode_id);

  /// @brief デストラクタ
  virtual
  ~BnODNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部出力ノード/D-FFノードの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 入力ノードのID番号を返す．
  virtual
  ymuint
  inode_id() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 入力ノードのID
  ymuint mInodeId;

};


//////////////////////////////////////////////////////////////////////
/// @class BnOutputNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 出力ノードとD-FFノードの共通な親クラス
//////////////////////////////////////////////////////////////////////
class BnOutputNode :
  public BnODNode
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] inode_id 入力ノードのID番号
  BnOutputNode(ymuint id,
	       const char* name,
	       ymuint inode_id);

  /// @brief デストラクタ
  virtual
  ~BnOutputNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 外部出力の時 true を返す．
  virtual
  bool
  is_output() const;

};


//////////////////////////////////////////////////////////////////////
/// @class BnDffNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief D-FF ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnDffNode :
  public BnODNode
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID 番号
  /// @param[in] name ノード名
  /// @param[in] inode_id 入力ノードのID番号
  /// @param[in] rval リセット値
  BnDffNode(ymuint id,
	    const char* name,
	    ymuint inode_id,
	    char rval);

  /// @brief デストラクタ
  virtual
  ~BnDffNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief D-FF ノードの時 true を返す．
  virtual
  bool
  is_dff() const;


public:
  //////////////////////////////////////////////////////////////////////
  // ラッチタイプの外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief リセット値を返す．
  virtual
  char
  reset_val() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // リセット値
  char mResetVal;

};


//////////////////////////////////////////////////////////////////////
/// @class BnLogicNode BnNodeImpl.h "BnNodeImpl.h"
/// @brief 論理ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class BnLogicNode :
  public BnNodeImpl
{
public:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  /// @param[in] id ID番号
  /// @param[in] name ノード名
  /// @param[in] fanins ファンインのID番号の配列
  /// @param[in] func_type 関数の型
  ///
  /// 入力数は func_type から取得する．
  BnLogicNode(ymuint id,
	      const char* name,
	      const ymuint* fanins,
	      const BnFuncType* func_type);

  /// @brief デストラクタ
  virtual
  ~BnLogicNode();


public:
  //////////////////////////////////////////////////////////////////////
  // 全タイプ共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 外部入力の時 true を返す．
  virtual
  bool
  is_logic() const;


public:
  //////////////////////////////////////////////////////////////////////
  // 論理タイプ/ゲートタイプに共通の外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ファンイン数を得る．
  virtual
  ymuint
  fanin_num() const;

  /// @brief ファンインのノードIDを返す．
  /// @param[in] pos 入力位置 ( 0 <= pos < fanin_num() )
  virtual
  ymuint
  fanin_id(ymuint pos) const;

  /// @brief 関数のタイプを返す．
  const BnFuncType*
  func_type() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  // ここのメモリ領域はすべて BnNetworkImpl::mAlloc が管理する．
  //////////////////////////////////////////////////////////////////////

  // ファンイン数
  ymuint mFaninNum;

  // ファンインのIDの配列
  const ymuint* mFanins;

  // 関数の型
  const BnFuncType* mFuncType;

};

END_NAMESPACE_YM_BNET

#endif // BLIFNODEIMPL_H
