# -*- Doc -*-

= BnNetwork
松永 裕介<yusuke.matsunaga2010@gmail.com>
v1.0 2019-05-15

BnNetwork はブーリアンネットワーク(Boolean network)を表すクラスである．
ただし，DFFとラッチを含むので正確には syncronous Boolean network
である．
論理合成のベンチマークフォーマットである `.blif` (blif)フォーマットと
`.bench` (iscas89)フォーマットで記述された回路はこの BnNetwork で
正確に表すことができる

NOTE: ただし，後述するように外部入力がそのまま外部出力に接続していて，
外部入力と外部出力が同名の場合にはどちらかの名前が自動生成名に置き換えられる．

== ブーリアンネットワーク

実際の組み合わせ論理回路はANDゲートやORゲートなどの組み合わせ論理ゲートで構成
されているが，使用するセルライブラリが決まっていない状態の回路を表すためには
具体的な論理ゲートに依存しない形の表現形式が必要となる．
このように組み合わせ論理回路を抽象的に表すデータ構造として
ブーリアンネットワーク(Boolean network)が用いられる．

ブーリアンネットワークは具体的には節点に属性が付加された
DAG(directed acyclic graph)であり，
節点には以下の３種類がある．

* 入力節点: 回路の入力を表す．

* 論理節点: 回路内部の論理を表す．
  この節点の入出力の関係を表す論理式を持つ．

* 出力節点: 回路の出力を表す．

直接依存関係がある節点間には有効枝が張られる．
今，節点__u__から節点__v__への枝がある時，
__u__を__v__の *ファンイン* と呼ぶ．
同様に__v__を__u__の *ファンアウト* と呼ぶ．

ブーリアンネットワークでは全ての節点が1ビットの信号線
に対応している．多ビットのビットベクタは扱わない．

== 外部入出力のインターフェイス

ブーリアンネットワークの入力節点および出力節点が回路全体の外部入力および外部出力
に対応しているが，
回路内部の構成を回路外部から見たインターフェイスから独立させておいたほうが
いろいろと都合がよい．
そこで `BnNetwork` では *ポート* と呼ぶ構成要素を用意している．
ポートは固有の名前を持ち，
1つあるいは複数の入力節点か出力節点に対応する．
もっとも単純なポートはそれぞれが1つの入力節点もしくは出力節点に
対応する．
場合によっては複数の入力節点をまとめて1つのポートに対応させることもできる．
出力の場合も同様である．
これはビットベクタを1つのポートで表す時に用いられる．
さらに，入力節点と出力節点が混在したポートを定義することも可能である．
このように，ポートを回路の外部インターフェイスとして用意することで，
`BnNetwork` を `Verilog-HDL` の下位モジュールとみなすことができる．

== 順序回路への対応

通常の論理回路が純粋な組み合わせ論理回路であることは極めて稀で，
一般的には記憶素子を含んだ順序回路となる．
そこで，`BnNetwork` ではD-Flip/Flop(D-FF)およびラッチを表す構成要素を用意している．
ただし，これらの記憶素子をブーリアンネットワークに含めることはできないため，
ブーリアンネットワークの外側にD-FFおよびラッチを配置している．
具体的にはD-FFおよびラッチの *入力* をブーリアンネットワークの *出力節点*
に対応づけ，D-FFおよびラッチの *出力* をブーリアンネットワークの *入力節点*
に対応付けている．
さらに，D-FFには *クロック* 入力が，ラッチには *イネーブル* 入力が必要であるが，
これらはブーリアンネットワークの *出力節点* に対応付けられる．


== 簡単な回路の例
